{"version":3,"sources":["Repositories-list/Repository.js","Repositories-list/index.js","API/GITHUB-API.js","App.js","serviceWorker.js","index.js"],"names":["Repository","props","react_default","a","createElement","repositories","map","repo","index","className","key","alt","height","width","src","owner","avatar_url","name","description","handleNumber","stargazers_count","open_issues_count","handleDaysDifference","created_at","split","login","per","RepositoryList","state","page","hasMore","loadRepositories","_this$state","_this","date","Date","setDate","getDate","diff","url","axios","get","getRepositories","toISOString","then","res","setState","concat","Object","toConsumableArray","data","items","num","toFixed","replace","moment","b","loader","react_infinite_scroller_default","pageStart","this","loadMore","Repositories_list_Repository","Component","App","Repositories_list","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26eff1ba.chunk.js","sourcesContent":["import React from \"react\";\nconst Repository = props => {\n  return (\n    <div>\n      {props.repositories.map((repo, index) => (\n        <div className=\"Repository\" key={index}>\n          <div className=\"image\">\n            <img alt=\"\" height=\"150\" width=\"150\" src={repo.owner.avatar_url} />\n          </div>\n          <div className=\"details\">\n            <div className=\"repoName\"> {repo.name} </div>\n            <p className=\"repoDescription\"> {repo.description} </p>\n            <div className=\"detailss\">\n              <div className=\"stars\">\n                Stars: {props.handleNumber(repo.stargazers_count)}\n              </div>\n              <div className=\"issues\">\n                ISSUES: {props.handleNumber(repo.open_issues_count)}\n              </div>\n              <div className=\"submitted\">\n                SUBMMITED\n                {\" \" +\n                  props.handleDaysDifference(repo.created_at.split(\"T\")[0]) +\n                  \" \"}\n                DAYS AGO BY {repo.owner.login}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Repository;\n","import React, { Component } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport moment from \"moment\";\nimport \"../CSS/Css.css\";\nimport Repository from \"./Repository\";\nimport {getRepositories} from \"../API/GITHUB-API\";\nconst per = 100 ;\nclass RepositoryList extends Component {\n  state = {\n    repositories: [],\n    page: 1,\n    hasMore: true\n  };\n  loadRepositories = () => {\n    const { page, repositories } = this.state;\n    var date = new Date();\n    date.setDate(date.getDate() - 30);\n    var diff = date.toISOString().split(\"T\")[0]; \n    getRepositories(diff,page,per).then(res =>\n      this.setState({\n        repositories: [...repositories, ...res.data.items],\n        page: page + 1\n      })\n    );\n    if (page > 10) {\n      this.setState({\n        hasMore: false\n      });\n    }\n  };\n  handleNumber = num => {\n    if (num >= 1000000000) {\n      return (num / 1000000000).toFixed(1).replace(/\\.0$/, \"\") + \"G\";\n    }\n    if (num >= 1000000) {\n      return (num / 1000000).toFixed(1).replace(/\\.0$/, \"\") + \"M\";\n    }\n    if (num >= 1000) {\n      return (num / 1000).toFixed(1).replace(/\\.0$/, \"\") + \"K\";\n    }\n    return num;\n  };\n\n  handleDaysDifference = created_at => {\n    var date = new Date();\n\n    var a = moment(date.toISOString().split(\"T\")[0], \"YYYY-MM-DD\");\n\n    var b = moment(created_at, \"YYYY-MM-DD\");\n\n    var days = a.diff(b, \"days\");\n    return days;\n  };\n\n  render() {\n    const loader = (\n      <div key={0} className=\"loader\">\n        Loading...\n      </div>\n    );\n\n    return (\n      <InfiniteScroll\n        pageStart={this.state.page}\n        loadMore={this.loadRepositories}\n        hasMore={this.state.hasMore}\n        loader={loader}\n      >\n        <Repository\n          repositories={this.state.repositories}\n          handleNumber={this.handleNumber}\n          handleDaysDifference={this.handleDaysDifference}\n        />\n      </InfiniteScroll>\n    );\n  }\n}\nexport default RepositoryList;\n","import axios from \"axios\";\n\nexport function getRepositories(diff, page, per) {\n  const url =\n    \"https://api.github.com/search/repositories?q=created:>\" +\n    diff +\n    \"&sort=stars&order=desc&page=\" +\n    page +\n    \"&per_page=\" +\n    per;\n  return axios.get(url);\n}\n\n","import React, { Component } from \"react\";\nimport RepositoryList from \"./Repositories-list\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <RepositoryList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}